cd /home/group09/projects/04
onespin::create_command -force -arg_num 1 -arg_desc instancelist -callback ::onespin_internal::ec_commands::do_add_ignored_instance_output -modes ec -help_short {Adds all the ignored outputs for the given instances} -help_long {Adds all the ignored outputs for the given instances. For each of the instances in 'instancelist' adds all the outputs of the instance as ignored outputs for comparison.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name golden type YESNO default false help {ignore the outputs from golden instance list} hidden false no_help {ignore the outputs from golden instance list}} -opt {name revised type YESNO default false help {ignore the outputs from revised instance list} hidden false no_help {ignore the outputs from revised instance list}} add_ignored_instance_output 
onespin::create_command -force -arg_num 0 -arg_desc {} -callback ::onespin_internal::compare_modules::do_map_design -modes setup -help_short {Creates the mapped module pairs for the elaborated designs} -help_long {Creates the mapped module pairs for the elaborated designs. Top level module is the same as the top level of the elaborated design.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name debug_level type STRING default 0 help {level used for debugging} hidden false synopsis unsigned} -opt {name include_cells type YESNO default false help {include the library cells in verification} hidden false no_help {include the library cells in verification}} -opt {name log_file type STRING default {} help {write the results to a log file} hidden false synopsis string} -opt {name replace_regexp type STRING default {} help {list of regular expressions (even number of elements) to be replaced before name-based mapping} hidden false synopsis list} map_design 
onespin::create_command -force -arg_num 0 -arg_desc {} -callback ::onespin_internal::compare_modules::do_compare_design -modes setup -help_short {Compares all the mapped module pairs in bottom-up topological order} -help_long {Compares all the mapped module pairs in bottom-up topological order. 'compare_design' generates for each sub-module pair a tcl script in the directory specified. The tcl scripts are put into <replaceable>script_directory</replaceable>/scripts. Onespin database is saved in <replaceable>script_directory</replaceable>/db. The results of comparison are put into <replaceable>script_directory</replaceable>/scripts/result. 
	The option 'module_command_cpu_time' is used to set the cpu time limit for all commands used in module verification. The option 'module_global_memory' is used to set the global memory limit for module verification. 
	If 'num_jobs' is specified, the mapped modules pairs are distributed into 'num_jobs' bundles and allows parallel verification of all the bundles at the same time. If 'num_jobs' is given, then the flag 'blackbox_failing_modules' as parallel processing can only be done if the failed modules are blackboxed in further comparison of modules. The option 'partition_database' partitions the database into 'num_jobs' bundles. 
	If 'compute_boundary_constraints' is specified, the constraints are computed for the module pairs and used during verification of module pairs. The constraints are written to a different file <replaceable>sub-module_pair</replaceable>.cons and used during verification of the sub modules. To write the computed constraits to a file use 'write_boundary_constraints'. 
	If local tcl script is to be used during verification instead of 'compare_modules.tcl' from onespin distribution. Option 'debug_level'(1-5) is used to write more verbose messages to onespin shell. 'remote_command' can be used if different machines are to be used in parallel for distribured computing.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name blackbox_failing_modules type YESNO default false help {allows blackboxing of the failed modules} hidden false no_help {allows blackboxing of the failed modules}} -opt {name compute_boundary_constraints type YESNO default false help {compute the constraints for verification} hidden false no_help {compute the constraints for verification}} -opt {name debug_level type STRING default 0 help {level used for debugging} hidden false synopsis unsigned} -opt {name write_boundary_constraints type YESNO default false help {write the computed constraints to a file} hidden false no_help {write the computed constraints to a file}} -opt {name script_directory type STRING default onespin help {write the sub-module scripts to the directory} hidden false synopsis string} -opt {name use_module_limits type YESNO default false help {deprecated, apply cpu time limit for the verification of each module} hidden false no_help {deprecated, apply cpu time limit for the verification of each module}} -opt {name module_command_cpu_time type STRING default 0 help {set the cpu time limit for all commands used in module verification} hidden false synopsis seconds} -opt {name module_global_memory type STRING default 0 help {set the global memory for the verification of each module} hidden false synopsis MB} -opt {name partition_database type YESNO default true help {partition the datase for the bundles} hidden false no_help {partition the datase for the bundles}} -opt {name num_jobs type STRING default 0 help {number of jobs to launch in parallel} hidden false synopsis unsigned} -opt {name remote_command type STRING default {} help {remote command to launch onespin tool} hidden false synopsis string} -opt {name replace_regexp type STRING default {} help {list of regular expressions (even number of elements) to be replaced before name-based mapping} hidden false synopsis list} -opt {name s type YESNO default false help {stop after generation of verification scripts} hidden false no_help {stop after generation of verification scripts}} -opt {name use_local_script type STRING default {} help {use the local 'compare_module.tcl' script} hidden false synopsis string} compare_design 
onespin::create_command -force -arg_num 1 -arg_desc bundle_pid -callback ::onespin_internal::compare_modules::do_add_bundle_pid -modes setup -help_short {Add bundle process id to the list of running bundle processes} -help_long {Add bundle process id to the list of running bundle processes. 
	Used during parallel processing to check the current running processes and the bundles that exit abnormally.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} add_bundle_pid 
onespin::create_command -force -arg_num 1 -arg_desc resultfile -callback ::onespin_internal::compare_modules::do_report_compare_module -modes ec -help_short {Reports the compare status of the compared module} -help_long {Reports the compare status of the compared module. Reports incomplete port mapping and report inconsistent blackboxing done. Writes the result to the <replaceable>resultfile</replaceable>} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name with_constraints type YESNO default false help {constraints used while verification} hidden false no_help {constraints used while verification}} -opt {name blackbox_failing_modules type YESNO default false help {allows blackboxing of the failed modules} hidden false no_help {allows blackboxing of the failed modules}} report_compare_module 
onespin::create_command -force -arg_num 1 -arg_desc script_directory -callback ::onespin_internal::compare_modules::do_report_compare_design_results -modes {setup ec} -help_short {Reports the result summary of the module pair comparisons from script directory.} -help_long {Report information about the result summary of the module pair comparisons from script directory. If none of the options -passed, -failed, -skipped, and -filter are given, the summary is reported. Otherwise the information for the selected kind(s) is reported.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name summary type YESNO default false help {print the summary of passed, failed and skipped module pair comparisions} hidden false no_help {print the summary of passed, failed and skipped module pair comparisions}} -opt {name filter type STRING default {} help {filter by names that match a pattern 
	is exclusive to: summary} hidden false synopsis list-of-patterns} -opt {name passed type YESNO default false help {passed modules 
	is exclusive to: summary} hidden false no_help {passed modules 
	is exclusive to: summary}} -opt {name failed type YESNO default false help {failed modules 
	is exclusive to: summary} hidden false no_help {failed modules 
	is exclusive to: summary}} -opt {name skipped type YESNO default false help {skipped modules 
	is exclusive to: summary} hidden false no_help {skipped modules 
	is exclusive to: summary}} report_compare_design_results 
onespin::create_command -force -arg_num 1 -arg_desc modulepairs -callback ::onespin_internal::compare_modules::do_report_compare_design -modes {setup ec} -help_short {Reports the result summary of the module pair comparisons.} -help_long {Reports the result summary of the module pair comparisons. Module pairs is the list of {{<replaceable>Golden Module</replaceable> <replaceable>Revised Module</replaceable>} {TCL file for this modulepair}}} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name blackbox_failing_modules type YESNO default false help {allows blackboxing of the failed modules} hidden false no_help {allows blackboxing of the failed modules}} -opt {name script_directory type STRING default {} help {directory of sub-module scripts} hidden false synopsis string} -opt {name write type STRING default {} help {writes the result to a file} hidden false synopsis string} report_compare_design 
onespin::create_command -force -arg_num 1 -arg_desc modulepairs -callback ::onespin_internal::compare_modules::do_report_compare_bundle -modes {setup ec} -help_short {Reports the result summary of the module pair comparisons for a bundle.} -help_long {Reports the result summary of the module pair comparisons for a bundle. Module pairs is the list of {{<replaceable>Golden Module</replaceable> <replaceable>Revised Module</replaceable>} {TCL file for this modulepair}}} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name write type STRING default {} help {writes the result to a file} hidden false synopsis string} report_compare_bundle 
onespin::create_command -force -arg_num 0 -arg_desc {} -callback ::onespin_internal::compare_modules::do_report_bundle_result -modes {setup ec} -help_short {Reports the result summary of the bundles.} -help_long {Reports the result summary of the complete verification after all the bundles are verified. Gets the bundle results from the 'script_directory' and computes the result summary.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name num_jobs type STRING default 0 help {number of jobs launched in parallel} hidden false synopsis unsigned} -opt {name script_directory type STRING default onespin help {directory of sub-module scripts} hidden false synopsis string} report_bundle_result 
onespin::create_command -force -arg_num 1 -arg_desc debug_level -callback ::onespin_internal::compare_modules::do_set_compare_modules_debug_level -modes {setup ec} -help_short {Compute and write the constraints} -help_long {Compute and write the constraints} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} set_compare_modules_debug_level 
onespin::create_command -force -arg_num 1 -arg_desc resultdir -callback ::onespin_internal::compare_modules::do_check_results -modes {setup ec} -help_short {Checks the passed, skipped and failed modules} -help_long {Checks the passed, skipped and failed modules} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name passed type STRING default {} help {number of passed modules} hidden false synopsis unsigned} -opt {name failed type STRING default {} help {number of failed modules} hidden false synopsis unsigned} -opt {name skipped type STRING default {} help {number of skipped modules} hidden false synopsis unsigned} check_results 
onespin::create_command -force -arg_num 1 -arg_desc module_patterns -callback ::onespin_internal::compare_modules::do_get_modules_design -modes {setup ec} -help_short {get the modules after map_design} -help_long {Get the modules after map_design. Returns all the modules matching 'module_patterns'. If 'golden' or 'revised' is specified the corresponding design modules are returned. If 'mapped' is specified, return all the mapped modules from the corresponding design matching the module_pattern. If 'unmapped' is specified, return all the unmapped modules from the corresponding design matching the module_pattern. If 'invert' is specified, return all the modules from the corresponding design that do not match the module_pattern.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name golden type YESNO default false help {golden design} hidden false no_help {golden design}} -opt {name revised type YESNO default false help {revised design} hidden false no_help {revised design}} -opt {name mapped type YESNO default false help {mapped modules} hidden false no_help {mapped modules}} -opt {name unmapped type YESNO default false help {unmapped modules} hidden false no_help {unmapped modules}} -opt {name invert type YESNO default false help {modules which does not match the pattern} hidden false no_help {modules which does not match the pattern}} get_modules_design 
onespin::create_command -force -arg_num 1 -arg_desc script_directory -callback ::onespin_internal::compare_modules::do_clear_compare_design_results -modes {setup ec} -help_short {Clear all the results from the previous computation of command 'compare_design'} -help_long {Clear all the results from the previous computation of command 'compare_design'.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} clear_compare_design_results 
onespin::create_command -force -arg_num 1 -arg_desc result_file -callback ::onespin_internal::compare_modules::do_check_module_verified -modes {setup ec} -help_short {Check if the module is already verified} -help_long {Check if the module is already verified and return '1' if passes else '0'. The option 'module_pair' specifies the modules pair to be checked. The option 'previous_round' checks if the module is verified in the previous round. The argument 'result_file' specifies the location of the result file for the modules pair to be checked.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name module_pair type STRING default {} help {module pair to be checked} hidden false synopsis list} -opt {name previous_round type YESNO default false help {module is equivalent in previous rounds} hidden false no_help {module is equivalent in previous rounds}} check_module_verified 
onespin::create_command -force -arg_num 0 -arg_desc {} -callback ::onespin_internal::compare_modules::do_setup_initial_state -modes ec -help_short {Setup the initial state for saving madule constraints and redundants} -help_long {Setup the initial state for saving madule constraints and redundants.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} setup_initial_state 
onespin::create_command -force -arg_num 1 -arg_desc mod_cons_file -callback ::onespin_internal::compare_modules::do_load_module_constraints -modes ec -help_short {Read the module and instance mappings from a file} -help_long {Read the module and instance mappings from a file.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name module_pair type STRING default {} help {module pair} hidden false synopsis list} load_module_constraints 
onespin::create_command -force -arg_num 1 -arg_desc constraint_file -callback ::onespin_internal::compare_modules::do_save_module_constraints -modes ec -help_short {Save the module constraints to a file} -help_long {Save the module constraints to a file. The option 'module_pair' specifies the modules pair for which the constraints are to be saved. The option 'mod_inst_pairs' specifies the modules pair instance paths for this module and the sub modules. The list contains the  elements {{<replaceable>module pair</replaceable> <replaceable>module script</replaceable>} <replaceable>instance pairs</replaceable>} The option 'parent_modpairs' specifies the parent module pairs for this module. The list contains the  elements {<replaceable>parent module pair</replaceable> <replaceable>parent module script</replaceable>} The option 'golden_ignored_outputs' specifies the ignored outputs of golden design. The option 'revised_ignored_outputs' specifies the ignored outputs of revised design. The argument 'constraint_file' gives the constraint file location to save the constraints for the module pair.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name module_pair type STRING default {} help {module pair under consideration} hidden false synopsis list} -opt {name mod_inst_pairs type STRING default {} help {Instance paths for this module and the sub modules} hidden false synopsis list} -opt {name parent_modpairs type STRING default {} help {Parent modules instantiating this module} hidden false synopsis list} -opt {name golden_ignored_outputs type STRING default {} help {Ignored outputs of golden design} hidden false synopsis list} -opt {name revised_ignored_outputs type STRING default {} help {Ignored outputs of revised design} hidden false synopsis list} save_module_constraints 
onespin::create_command -force -arg_num 1 -arg_desc module_pairs -callback ::onespin_internal::compare_modules::do_compute_write_boundary_constraints -modes {setup ec} -help_short {Compute and write the constraints} -help_long {Compute and write the constraints. The option 'num_jobs' specifies the number of jobs for parallel verification. The option 'script_directory' specifies the directory of the scripts written. If 'write_full_constraints' is specified, then the complete constraints are written to file <replaceable>script_directory</replaceable>/scripts/cons/Full_Constraints<replaceable>round_number</replaceable>.cons The argument 'module_pairs' specifies the module pairs of the design. The list contains the  elements {<replaceable>module pair</replaceable> <replaceable>module script</replaceable>}} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name num_jobs type STRING default 0 help {number of jobs launched in parallel} hidden false synopsis unsigned} -opt {name script_directory type STRING default onespin help {write the sub-module scripts to the directory} hidden false synopsis string} -opt {name write_full_constraints type YESNO default false help {write the full constraints to a file} hidden false no_help {write the full constraints to a file}} compute_write_boundary_constraints 
onespin::create_command -force -arg_num 1 -arg_desc redundant_bits -callback ::onespin_internal::compare_modules::do_delete_redundant_mapping -modes {setup ec} -help_short {Delete the redundant mapping from design} -help_long {Delete the redundant bit mappings. The options 'golden' or 'revised' specifies the design of the 'redundant_bits'. By default the 'golden' design is selected. The argument 'redundant_bits' specifies the redundant bits of the design.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name golden type YESNO default false help {use nets and ports of golden design; is exclusive to: revised} hidden false no_help {use nets and ports of golden design; is exclusive to: revised}} -opt {name revised type YESNO default false help {use nets and ports of revised design; is exclusive to: golden} hidden false no_help {use nets and ports of revised design; is exclusive to: golden}} delete_redundant_mapping 
onespin::create_command -force -arg_num 1 -arg_desc bundle_name -callback ::onespin_internal::compare_modules::do_write_bundle_log -modes {setup ec} -help_short {Write the bundle log file} -help_long {Write the bundle log file. The option 'script_directory' specifies the directory of the scripts written. The argument 'bundle_name' specifies the bundle name.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name script_directory type STRING default onespin help {write the sub-module scripts to the directory} hidden false synopsis string} write_bundle_log 
onespin::create_command -force -arg_num 1 -arg_desc zfast_rtlfe -callback ::onespin_internal::compare_zfast::do_import_zfast -modes setup -help_short {reads the 'rtlfe_*.tcl' from zfast synthesis and writes onespin script} -help_long {reads the 'rtlfe_*.tcl' from zfast synthesis and writes onespin script} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name write type STRING default {} help {write onespin script} hidden false synopsis string} -opt {name synthesis_directory type STRING default {} help {synthesis directory} hidden false synopsis string} -opt {name script_directory type STRING default onespin help {write the onespin scripts to the directory} hidden false synopsis string} -opt {name num_jobs type STRING default 0 help {number of jobs to launch in parallel} hidden false synopsis unsigned} -opt {name global_memory type STRING default 0 help {set the global memory limit in <replaceable>MB</replaceable>} hidden false synopsis unsigned} -opt {name command_cpu_time type STRING default 0 help {set the cpu time limit for all commands in <replaceable>seconds</replaceable>} hidden false synopsis unsigned} -opt {name remote_command type STRING default {} help {remote command to launch onespin tool} hidden false synopsis string} -opt {name s type YESNO default false help {stop after generation of verification scripts} hidden false no_help {stop after generation of verification scripts}} -opt {name tclfile type STRING default {} help {tcl file to use for generated scripts} hidden false synopsis string} import_zfast 
onespin::create_command -force -arg_num 0 -arg_desc {} -callback ::onespin_internal::compare_zfast::do_map_zfast -modes setup -help_short {Creates the mapped module pairs for the elaborated designs for zfast} -help_long {Creates the mapped module pairs for the elaborated designs for zfast. Top level module is the same as the top level of the elaborated design for zfast. Uses the edif files in the synthesis directory for mapping the modules.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name synthesis_directory type STRING default {} help {synthesis directory} hidden false synopsis string} map_zfast 
onespin::create_command -force -arg_num 0 -arg_desc {} -callback ::onespin_internal::compare_zfast::do_compare_zfast -modes setup -help_short {Compares all the mapped module pairs for Zfast} -help_long {Compares all the mapped module pairs for Zfast. 'compare_zfast' generates for each sub-module pair a tcl script in the directory specified. The tcl scripts are put into <replaceable>script_directory</replaceable>/scripts. Onespin database is saved in <replaceable>script_directory</replaceable>/db. The results of comparision are put into <replaceable>script_directory</replaceable>/scripts/result. If 'num_jobs' is specified, the mapped modules pairs are distributed into 'num_jobs' bundles and allows parallel verification of all the bundles at the same time. 'remote_command' can be used if different machines are to be used in parallel for distribured computing.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name use_module_limits type YESNO default false help {apply cpu time limit for the verification of each module} hidden false no_help {apply cpu time limit for the verification of each module}} -opt {name synthesis_directory type STRING default {} help {synthesis directory} hidden false synopsis string} -opt {name script_directory type STRING default onespin help {write the onespin scripts to the directory} hidden false synopsis string} -opt {name num_jobs type STRING default 0 help {number of jobs to launch in parallel} hidden false synopsis unsigned} -opt {name remote_command type STRING default {} help {remote command to launch onespin tool} hidden false synopsis string} -opt {name s type YESNO default false help {stop after generation of verification scripts} hidden false no_help {stop after generation of verification scripts}} -opt {name tclfile type STRING default {} help {tcl file to use for generated scripts} hidden false synopsis string} compare_zfast 
onespin::create_command -force -arg_num 1 -arg_desc resultfile -callback ::onespin_internal::compare_zfast::do_report_compare_zfast_module -modes ec -help_short {Reports the compare status of the compared zfast module} -help_long {Reports the compare status of the compared zfast module. Reports incomplete port mapping and report inconsistent blackboxing done. Writes the result to the <replaceable>resultfile</replaceable>} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} report_compare_zfast_module 
onespin::create_command -force -arg_num 1 -arg_desc modulepairs -callback ::onespin_internal::compare_zfast::do_report_compare_zfast -modes {setup ec} -help_short {Reports the result summary of the module pair comparisions.} -help_long {Reports the result summary of the module pair comparisions. Module pairs is the list of {{<replaceable>Golden Module</replaceable> <replaceable>Revised Module</replaceable>} {TCL file for this modulepair}}} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name write type STRING default {} help {writes the result to a file} hidden false synopsis string} report_compare_zfast 
onespin::create_command -force -arg_num 1 -arg_desc modulepairs -callback ::onespin_internal::compare_zfast::do_report_compare_zfast_bundle -modes {setup ec} -help_short {Reports the result summary of the module pair comparisions for a bundle.} -help_long {Reports the result summary of the module pair comparisions for a bundle. Module pairs is the list of {{<replaceable>Golden Module</replaceable> <replaceable>Revised Module</replaceable>} {TCL file for this modulepair}}} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name write type STRING default {} help {writes the result to a file} hidden false synopsis string} report_compare_zfast_bundle 
onespin::create_command -force -arg_num 1 -arg_desc bundlescripts -callback ::onespin_internal::compare_zfast::do_report_zfast_bundle_result -modes {setup ec} -help_short {Reports the result summary of the bundles.} -help_long {Reports the result summary of the complete verification after all the bundles are verified. 'bundlescripts' is the list of bundle scripts.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} report_zfast_bundle_result 
onespin::create_command -force -arg_num 1 -arg_desc module_patterns -callback ::onespin_internal::compare_zfast::do_get_modules_zfast -modes {setup ec} -help_short {get the modules after map_zfast} -help_long {Get the modules after map_zfast. Returns all the modules matching 'module_patterns'. If 'golden' or 'revised' is specified the corresponding design modules are returned. If 'mapped' is specified, return all the mapped modules from the corresponding design matching the module_pattern. If 'unmapped' is specified, return all the unmapped modules from the corresponding design matching the module_pattern. If 'invert' is specified, return all the modules from the corresponding design that do not match the module_pattern.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name golden type YESNO default false help {golden design} hidden false no_help {golden design}} -opt {name revised type YESNO default false help {revised design} hidden false no_help {revised design}} -opt {name mapped type YESNO default false help {mapped modules} hidden false no_help {mapped modules}} -opt {name unmapped type YESNO default false help {unmapped modules} hidden false no_help {unmapped modules}} -opt {name invert type YESNO default false help {modules which does not match the pattern} hidden false no_help {modules which does not match the pattern}} get_modules_zfast 
onespin::create_command -force -arg_num 0 -arg_desc {} -callback ::onespin_internal::compare_zfast::do_map_transformed_signals_zfast -modes ec -help_short {Transform and map the signal names} -help_long {Transforms the signals names using the known transformations for signals and map them..} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name input type YESNO default false help {transform and map unmapped input signals} hidden false no_help {transform and map unmapped input signals}} -opt {name output type YESNO default false help {transform and map unmapped output signals} hidden false no_help {transform and map unmapped output signals}} -opt {name state type YESNO default false help {transform and map unmapped state signals} hidden false no_help {transform and map unmapped state signals}} map_transformed_signals_zfast 
onespin::create_command -force -arg_num 1 -arg_desc net -callback ::onespin_internal::feedback_loops::do_get_loops -modes {setup ec} -help_short {get the loops starting from net} -help_long {get the loops starting from net. If 'all' is specified, then all the loops below the net are found; else the shortest loops below the net are found. If 'depth' is specified, then the search stops after specific depth. To skip the nets inside the library cells of the loops specify the option 'skip_library_cells'. To skip the loops which have sequential elements specify the option 'exclude_sequential_elements'. Length of the loops to be found can be specified using the option 'length', used only with option 'all'. The options 'golden' or 'revised' correspond to golden or revised design.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name depth type STRING default 0 help {stop search after depth} hidden false synopsis int} -opt {name all type YESNO default false help {find all the loops} hidden false no_help {find all the loops}} -opt {name exclude_sequential_elements type YESNO default true help {exclude the loops if there are sequential elements} hidden false no_help {exclude the loops if there are sequential elements}} -opt {name length type STRING default 0 help {length of the loops to find} hidden false synopsis int} -opt {name golden type YESNO default false help {golden design} hidden false no_help {golden design}} -opt {name revised type YESNO default false help {revised design} hidden false no_help {revised design}} -opt {name skip_library_cells type YESNO default true help {skip the library cells from the loops} hidden false no_help {skip the library cells from the loops}} get_loops 
onespin::create_command -force -arg_num -2 -arg_desc designloops -callback ::onespin_internal::feedback_loops::do_get_mapping_loop_nets -modes {setup ec} -help_short {Get the mapping nets from the golden and revised loops} -help_long {Get the mapping nets from the golden and revised loops. Get the list of pair nets that can be mapped from list golden_loops and list of revised_loops.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name replace_regexp type STRING default {} help {list of regular expressions (even number of elements) to be replaced before name-based mapping} hidden false synopsis list} get_mapping_loop_nets 
onespin::create_command -force -arg_num 1 -arg_desc filename -callback ::onespin_internal::feedback_loops::do_gen_fbl_script -modes {setup ec} -help_short {Generate the script to cut the feedback loops} -help_long {Generate the script to cut the feedback loops. If 'golden_depth' is specified, then the golden design search stops after specific depth. If 'revised_depth' is specified, then the revised design search stops after specific depth. To get all the loops use the option 'all' which uses the command 'get_loops -all' to find loops. Default value is to find shortest loops using command 'get_loops'. The script will be written to <replaceable>filename</replaceable>.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name all type YESNO default false help {use TCL command 'get_loops all' to get loops of design} hidden false no_help {use TCL command 'get_loops all' to get loops of design}} -opt {name cut_signals type YESNO default false help {cut the mapped signals} hidden false no_help {cut the mapped signals}} -opt {name golden_depth type STRING default 0 help {stop search after depth in golden design} hidden false synopsis int} -opt {name revised_depth type STRING default 0 help {stop search after depth in revised design} hidden false synopsis int} -opt {name report_time type YESNO default false help {report the timings} hidden false no_help {report the timings}} gen_fbl_script 
onespin::create_command -force -arg_num 1 -arg_desc loops -callback ::onespin_internal::feedback_loops::do_report_loops -modes {setup ec} -help_short {Report the loops} -help_long {Report the loops as one loop per line.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} report_loops 
onespin::create_command -force -arg_num 1 -arg_desc GFV_name -callback ::onespin_internal::assertion_generation::do_create_completeness_plan -modes mv -help_short {Creates a GFV file for the current DUV and operational assertions, reads it in and opens it in the editor.} -help_long {} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name force type BOOL default false help {Forces overwriting of files.} hidden false} -opt {name reset_prop type STRING default {} help {Allows to specify the reset property in case it cannot be automatically identified via name matching.} hidden false synopsis name} -opt {name operation_props type STRING default {} help {Allows to specify the properties to be used in the property graph in case not all properties are to be used.} hidden false synopsis list_of_names} create_completeness_plan 
onespin::create_command -force -arg_num 1 -arg_desc SVA_filename -callback ::onespin_internal::assertion_generation::do_create_sva_module -modes {cc mv} -help_short {Creates an SVA module 'SVA_filename', reads it in, and opens it in the editor.} -help_long {} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name force type BOOL default false help {Forces overwriting of files.} hidden false} -opt {completor ::onespin_internal::assertion_generation::clk_sig_completor name clock_signal type STRING default {} help {Allows to select a specific trigger clock for assertion generation.} hidden false synopsis clk} -opt {name clock_edge type ENUM default default help {Allows to select a specific edge for the trigger clock.} hidden false values {default posedge negedge edge}} -opt {name disable_cond type STRING default {} help {Allows to specify a list of signals to be used in the disable condition. A leading ! indicates that the signal should be negated in the disable condition.} hidden false synopsis disable_list} -opt {name tidal type YESNO default false help {Allows to also generate operational assertions in TiDAL block.} hidden false no_help {Allows to also generate operational assertions in TiDAL block.}} create_sva_module 
onespin::create_command -force -arg_num 1 -arg_desc VIP -callback ::onespin_internal::assertion_generation::do_instantiate_vip -modes {cc mv} -help_short {Automates the instantiation for verification IP as far as possible.} -help_long {The command prepares a verification IP like axi3 for instantiation and opens it in the internal editor. If an address signal is provided with option -addr_sig, the command tries to fill in all relevant parameters and signals for the protocol verification IP. Supported values for argument 'VIP' are 'ahb', 'apb', 'axi3', 'axi4', 'axi4lite', 'axi4stream', 'scoreboard'. For reference documantation on the supported ARM protocol, please consider the following documents:
 <itemizedlist> <listitem><para>apb       : 'AMBA 3 APB Protocol v1.0 Specification'</para></listitem> <listitem><para>ahb       : 'AMBA 3 AHB-Lite v1.0 Specification'</para></listitem> <listitem><para>axi3      : 'AMBA AXI Protocol Version 2.0 Specification'</para></listitem> <listitem><para>axi4      : 'AMBA AXI Protocol Version 2.0 Specification'</para></listitem> <listitem><para>axi4lite  : 'AMBA AXI Protocol Version 2.0 Specification'</para></listitem> <listitem><para>axi4stream: 'AMBA 4 AXI4-Stream Protocol Version 1.0 Specification'</para></listitem> </itemizedlist>} -predef_completor {type TCL callback ::onespin_internal::assertion_generation::vip_completor} -see_also {read_sva check debug} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name force type BOOL default false help {Forces overwriting of files.} hidden false} -opt {name filename type STRING default {} help {Allows to specify a filename for the generated assertions.} hidden false synopsis name} -opt {completor ::onespin_internal::assertion_generation::sig_completor name addr_sig type STRING default {} help {Allows to specify the address signal for a protocol VIP. The target module name, parameters, and other signal names will be inferred from that signal name.} hidden false synopsis signal} -opt {completor ::onespin_internal::assertion_generation::module_completor name module type STRING default {} help {Allows to specify target module for VIP if there is no address signal.} hidden false synopsis name} instantiate_vip 
onespin::create_command -force -arg_num 1 -arg_desc CSV_file -callback ::onespin_internal::connectivity::do_check_connectivity -modes mv -help_short {Carries out connectivity checks specified in CSV_file} -help_long {The CSV file contains a list of comma-separated values for easy sharing with office applications. Each line in the CSV file corresponds to a connectivity check; it is checked that the signals specified in the first 2 columns are connected. If the 3rd column is non-empty, it specifies an additional condition under which the signals are connected. Note that such a condition is not supported for structural checks. Column 4 holds an optional delay, indicating how many cycles a value from the first column takes to propagate to the 2nd column. By default, connectivity checks are without delay. Delay is not supported for structural checks. For delayed checks, columns 5 and 6 optionally hold a signal name and an edge for a clock, respectively. If either column 1 or column 2 is empty, the line in the CSV file is treated as comment and does not create a check. Example CSV file content: 
<programlisting>ahb bus
ahb_top.u_master.htrans, ahb_top.u_slave.htrans
ahb_top.u_master.hwdata, ahb_top.u_slave.hwdata, ahb_top.u_master.hwrite
ahb_top.data           , ahb_top.data_d        ,                        , 1
ahb_top.d2             , ahb_top.d2_d          ,                        , 2, ahb_top.clk2, negedge
...</programlisting>
 The first line does not contain two comma-separated columns, hence it is treated as comment. The second line contains the connectivity check for signals <literal>ahb_top.u_master.htrans</literal> and <literal>ahb_top.u_slave.htrans</literal>. For structural connectivity, this check is performed based on fanin; otherwise, it is performed with an assertion checking that the two signals always have the same value. Note that naming of signals corresponds to the language used for checking (default SVA); for structural checks, both OneSpin and SVA signal names are supported. The third line contains the conditional check 
<programlisting>if (ahb_top.u_master.hwrite) ahb_top.u_master.hwdata==ahb_top.u_slave.hwdata</programlisting>
 If connectivity is checked structurally, this condition is ignored. The 4th line checks that <literal>ahb_top.data_d</literal> is 1 cycle delayed from <literal>ahb_top.data_i</literal>. The 5th line checks that <literal>ahb_top.d2_d</literal> is 2 negedge cycles of clock <literal>ahb_top.clk2</literal> delayed from <literal>ahb_top.d2</literal>.} -predef_completor {type FILE extension csv} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name language type ENUM default sva help {Language used for assertion generation.} hidden false values {sva itl}} -opt {name check_type type ENUM default assertion help {Generate assertions or properties.} hidden false values {assertion property}} -opt {name run_checks type YESNO default true help {Allows to switch off the running of the checks.} hidden false no_help {Allows to switch off the running of the checks.}} -opt {name remove_check_file type YESNO default false help {Allows to automatically delete the temporary file with generated checks after checking is finished. This is useful for regression runs.} hidden false no_help {Allows to automatically delete the temporary file with generated checks after checking is finished. This is useful for regression runs.}} -opt {name assertion_type type ENUM default immediate help {Create concurrent or immediate assertions (only possible for sva).} hidden false values {concurrent immediate}} -opt {name use_disable type YESNO default true help {Allows to de-active disable clauses in generated assertions.} hidden true no_help {Allows to de-active disable clauses in generated assertions.}} -opt {name clustering type YESNO default true help {Allows to run generated assertions with clustering.} hidden true no_help {Allows to run generated assertions with clustering.}} -opt {name disable_cond type STRING default {} help {Allows to specify a list of signals to be used in the disable condition. A leading ! indicates that the signal should be negated in the disable condition.} hidden false synopsis disable_list} -opt {name filename type STRING default {} help {Allows to specify a filename for the generated assertions.} hidden false synopsis name} -opt {name flavor type ENUM default default help {Language flavor used for assertion generation.} hidden true values {default verilog vhdl sva}} -opt {name force type BOOL default false help {Forces overwriting of files.} hidden false} -opt {completor ::onespin_internal::assertion_generation::clk_sig_completor name clock_signal type STRING default {} help {Allows to select a specific trigger clock for assertion generation.} hidden false synopsis clk} -opt {name clock_edge type ENUM default default help {Allows to select a specific edge for the trigger clock.} hidden false values {default posedge negedge edge}} -opt {name case_equal type YESNO default false help {Allows to use case equality (needed to check connectivity for non-01 values)} hidden false no_help {Allows to use case equality (needed to check connectivity for non-01 values)}} -opt {name combine type YESNO default true help {Allows to combine checks into one assertion according to internal heuristics} hidden false no_help {Allows to combine checks into one assertion according to internal heuristics}} -opt {name stable_select type YESNO default true help {Allows to keep the select signal stable for delayed conditional connectivity} hidden false no_help {Allows to keep the select signal stable for delayed conditional connectivity}} -opt {name type type ENUM default check help {Selects whether connectivity analysis is performed structurally or based on checks} hidden false values {check structural}} -opt {name signals type STRING default {} help {Performs structural connectivity analysis for the specified pair of signals} hidden false synopsis signal_pair} check_connectivity 
onespin::create_command -force -arg_num -3 -arg_desc completeness -callback ::onespin_internal::onespin_library::do_visualize_csm -modes mv -help_short {Displays a property graph as CSM (Conceptual State Machine) transition graph.} -help_long {} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name exact type YESNO default false help {Allows to do an exact rendering of the property graph.} hidden false no_help {Allows to do an exact rendering of the property graph.}} -opt {name filename type STRING default {} help {Allows to specify filename instead of generating random one. In case this option is used, an output file is generated, but the CSM is not displayed.} hidden false synopsis name} -opt {name state_names type STRING default {} help {Allows to specify names for the conceptual states.} hidden false synopsis list_of_state_names} -opt {name type type ENUM default svg help {Selects filetype to create.} hidden false values {svg png}} visualize_csm 
onespin::create_command -force -arg_num 1 -arg_desc FSM_signal_name -callback ::onespin_internal::onespin_library::do_visualize_fsm -modes {cc mv} -help_short {Displays a FSM (Finite State Machine) with all current results from FSM check as transition graph.} -help_long {} -predef_completor {type TCL callback ::onespin_internal::onespin_library::visualize_fsm_completor} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name use_values type YESNO default false help {Allows to display binary encoding of states.} hidden false no_help {Allows to display binary encoding of states.}} -opt {name show_excluded type YESNO default false help {Allows to display excluded states and transitions.} hidden false no_help {Allows to display excluded states and transitions.}} -opt {name filename type STRING default {} help {Allows to specify filename instead of generating random one. In case this option is used, an output file is generated, but the FSM is not displayed.} hidden false synopsis name} -opt {name type type ENUM default svg help {Selects filetype to create.} hidden false values {svg png}} visualize_fsm 
onespin::create_command -force -arg_num 0 -arg_desc {} -callback ::onespin_internal::onespin_library::do_set_hdl_init_state -modes {cc mv} -help_short {Uses the HDL init values of states in the RTL as initial values (useful for FPGAs).} -help_long {} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name force type BOOL default false help {Forces overwriting of init states.} hidden false} -opt {name uninitialized_value type ENUM default free help {Allows to specify the treatment of states without explicit HDL init values.} hidden false values {0 1 free}} set_hdl_init_state 
onespin::create_command -force -arg_num 0 -arg_desc {} -callback ::onespin_internal::x_checking::do_x_checking_setup -modes {setup cc mv} -help_short {Ensures a proper design setup for X-checking.} -help_long {} -see_also x_checking -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name check_effort type ENUM default none help {Run the signal domain checks with the given effort. None means to skip running the checks.} hidden false values {none minimum low medium high super maximum}} x_checking_setup 
onespin::create_command -force -arg_num 0 -arg_desc {} -callback ::onespin_internal::x_checking::do_x_checking -modes mv -help_short {Generates and checks assertions about the absence of X-related issues.} -help_long {} -see_also {x_checking_setup check debug} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name language type ENUM default sva help {Language used for assertion generation.} hidden false values {sva itl}} -opt {name check_type type ENUM default assertion help {Generate assertions or properties.} hidden false values {assertion property}} -opt {name run_checks type YESNO default true help {Allows to switch off the running of the checks.} hidden false no_help {Allows to switch off the running of the checks.}} -opt {name remove_check_file type YESNO default false help {Allows to automatically delete the temporary file with generated checks after checking is finished. This is useful for regression runs.} hidden false no_help {Allows to automatically delete the temporary file with generated checks after checking is finished. This is useful for regression runs.}} -opt {name assertion_type type ENUM default concurrent help {Create concurrent or immediate assertions (only possible for sva).} hidden false values {concurrent immediate}} -opt {name use_disable type YESNO default true help {Allows to de-active disable clauses in generated assertions.} hidden true no_help {Allows to de-active disable clauses in generated assertions.}} -opt {name clustering type YESNO default true help {Allows to run generated assertions with clustering.} hidden true no_help {Allows to run generated assertions with clustering.}} -opt {name disable_cond type STRING default {} help {Allows to specify a list of signals to be used in the disable condition. A leading ! indicates that the signal should be negated in the disable condition.} hidden false synopsis disable_list} -opt {name filename type STRING default {} help {Allows to specify a filename for the generated assertions.} hidden false synopsis name} -opt {name flavor type ENUM default default help {Language flavor used for assertion generation.} hidden true values {default verilog vhdl sva}} -opt {name force type BOOL default false help {Forces overwriting of files.} hidden false} -opt {completor ::onespin_internal::assertion_generation::clk_sig_completor name clock_signal type STRING default {} help {Allows to select a specific trigger clock for assertion generation.} hidden false synopsis clk} -opt {name clock_edge type ENUM default default help {Allows to select a specific edge for the trigger clock.} hidden false values {default posedge negedge edge}} -opt {name categories type STRING default {output fsm clock} help {Allows to specify a list of check categories to be created. Valid categories are output, fsm, clock, and state.} hidden false synopsis list_of_categories} x_checking 
onespin::create_command -force -arg_num 0 -arg_desc {} -callback ::onespin_internal::xcluster::do_check_xcluster -modes mv -help_short {Examines whether the current completeness plan(s) verify the whole I/O interface of the DUV.} -help_long {} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name check_outputs type YESNO default true help {Examines the determination of primary outputs in addition to the cluster inputs.} hidden false no_help {Examines the determination of primary outputs in addition to the cluster inputs.}} check_xcluster 
onespin::create_command -force -arg_num 1 -arg_desc State_table_file -callback ::onespin_internal::state_table::do_check_state_table -modes mv -help_short {Verifies that DUT implements given state table} -help_long {The file 'State_table_file' contains a UDP-like table description of the IO behavior of cell. Based on this file, an assertion is generated and checked that the current DUT in the tool implements the table. Multi-valued tables and checks are supported.} -predef_completor {type FILE extension st} -see_also check_cell_wiring -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name run_checks type YESNO default true help {Allows to switch off the running of the checks.} hidden false no_help {Allows to switch off the running of the checks.}} -opt {name remove_check_file type YESNO default false help {Allows to automatically delete the temporary file with generated checks after checking is finished. This is useful for regression runs.} hidden false no_help {Allows to automatically delete the temporary file with generated checks after checking is finished. This is useful for regression runs.}} -opt {name disable_cond type STRING default {} help {Allows to specify a list of signals to be used in the disable condition. A leading ! indicates that the signal should be negated in the disable condition.} hidden false synopsis disable_list} -opt {name use_disable type YESNO default true help {Allows to de-active disable clauses in generated assertions.} hidden true no_help {Allows to de-active disable clauses in generated assertions.}} -opt {name clustering type YESNO default true help {Allows to run generated assertions with clustering.} hidden true no_help {Allows to run generated assertions with clustering.}} -opt {name filename type STRING default {} help {Allows to specify a filename for the generated assertions.} hidden false synopsis name} -opt {name force type BOOL default false help {Forces overwriting of files.} hidden false} -opt {completor ::onespin_internal::assertion_generation::clk_sig_completor name clock_signal type STRING default {} help {Allows to select a specific trigger clock for assertion generation.} hidden false synopsis clk} -opt {name clock_edge type ENUM default default help {Allows to select a specific edge for the trigger clock.} hidden false values {default posedge negedge edge}} -opt {name complete type YESNO default false help {Allows to check that the table is indeed complete, i.e., the lines in the table cover all possible input values} hidden false no_help {Allows to check that the table is indeed complete, i.e., the lines in the table cover all possible input values}} -opt {name ignore_input_values type STRING default {} help {Allows to exclude input values from the full 9-values set} hidden false synopsis string} check_state_table 
onespin::create_command -force -arg_num -2 -arg_desc netlist -callback ::onespin_internal::state_table::do_check_cell_wiring -modes mv -help_short {Verifies that DUT corresponds to netlist} -help_long {The netlist files contain descriptions of all modules of the DUT. It is checked that this wiring from the netlist is implemented in the DUT. Supported netlist formats are Titan and Spice netlists. The return value is a list of all primitives in the netlist (to be checked by check_state_table).} -predef_completor {type FILE extension {tit spi}} -see_also check_state_table -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name run_checks type YESNO default true help {Allows to switch off the running of the checks.} hidden false no_help {Allows to switch off the running of the checks.}} -opt {name remove_check_file type YESNO default false help {Allows to automatically delete the temporary file with generated checks after checking is finished. This is useful for regression runs.} hidden false no_help {Allows to automatically delete the temporary file with generated checks after checking is finished. This is useful for regression runs.}} -opt {name disable_cond type STRING default {} help {Allows to specify a list of signals to be used in the disable condition. A leading ! indicates that the signal should be negated in the disable condition.} hidden false synopsis disable_list} -opt {name use_disable type YESNO default true help {Allows to de-active disable clauses in generated assertions.} hidden true no_help {Allows to de-active disable clauses in generated assertions.}} -opt {name clustering type YESNO default true help {Allows to run generated assertions with clustering.} hidden true no_help {Allows to run generated assertions with clustering.}} -opt {name filename type STRING default {} help {Allows to specify a filename for the generated assertions.} hidden false synopsis name} -opt {name force type BOOL default false help {Forces overwriting of files.} hidden false} -opt {completor ::onespin_internal::assertion_generation::clk_sig_completor name clock_signal type STRING default {} help {Allows to select a specific trigger clock for assertion generation.} hidden false synopsis clk} -opt {name clock_edge type ENUM default default help {Allows to select a specific edge for the trigger clock.} hidden false values {default posedge negedge edge}} -opt {name top type STRING default {} help {Specifies top-level module in netlist} hidden false synopsis module} check_cell_wiring 
onespin::create_command -force -arg_num 1 -arg_desc filename -callback ::onespin_internal::tb_generation::do_create_testbench -modes {mv cc} -help_short {Creates a testbench based on the selected witness.} -help_long {The command creates a testbench that instantiates the design. Signal values for stimuli and monitors are taken from the witness specified with option -cover.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name force type BOOL default false help {Forces overwriting of files.} hidden false} -opt {name libraries type STRING default {} help {Allows to specify additional libraries to be used} hidden false synopsis list_of_libraries} -opt {name severity type ENUM default error help {Configures the severity level of failing monitors} hidden false values {error warning display}} -opt {name time_unit type ENUM default ns help {Time unit for testbench} hidden false values {ms us ns ps}} -opt {name time_step type STRING default 5 help {Amount of TB time (in <replaceable>time_unit</replaceable>) for each step in the testbench} hidden false synopsis integer} -opt {name monitor type YESNO default true help {Allows to print out all signal values as they occur during simulation.} hidden false no_help {Allows to print out all signal values as they occur during simulation.}} -opt {name use_intermediate_signals type YESNO default false help {Allows to use introduce intermediate signals in Verilog testbenches to work around simulator issues.} hidden false no_help {Allows to use introduce intermediate signals in Verilog testbenches to work around simulator issues.}} -opt {name flavor type ENUM default default help {Testbench language flavor. Default is to determine it from top level module language} hidden false values {default verilog vhdl}} -opt {name additional_wait type YESNO default true help {Allows to introduce an additional wait of <replaceable>time_step</replaceable> between output check and next input change} hidden false no_help {Allows to introduce an additional wait of <replaceable>time_step</replaceable> between output check and next input change}} -opt {completor ::onespin_internal::tb_generation::cover_completor name cover type STRING default {} help {Selects the assertion/cover statement to be translated to testbench stimuli and monitors} hidden false synopsis cover_assertion} create_testbench 
onespin::create_command -force -arg_num -2 -arg_desc signal_value_pair -callback ::onespin_internal::tb_generation::do_cover_signals_values -modes mv -help_short {Creates cover statements to cover the required signals/values.} -help_long {The command creates cover statements for all the signal_value_pair arguments. A signal_value_pair argument is given by {list_of_signals list_of_values}. The command tries to cover all the bit values in the list for all the bits in the signals.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name use_disable type YESNO default true help {Allows to de-active disabling of resets.} hidden false no_help {Allows to de-active disabling of resets.}} -opt {name clustering type YESNO default true help {Allows to run generated assertions with clustering.} hidden true no_help {Allows to run generated assertions with clustering.}} -opt {name filename type STRING default {} help {Allows to specify a filename for the generated assertions.} hidden false synopsis name} -opt {name force type BOOL default false help {Forces overwriting of files.} hidden false} -opt {name ignore_input_values type STRING default {} help {Allows to exclude input values from the full 9-valued set} hidden false synopsis string} -opt {name max_combinations type STRING default 10000 help {Maximum combination of values to be considered} hidden false synopsis integer} -opt {name time_factor type STRING default 1 help {Allows to use num_combinatios*time_factor steps to cover signals} hidden false synopsis int} cover_signals_values 
onespin::create_command -force -arg_num -2 -arg_desc IPXACT_file -callback ::onespin_internal::register_checking::do_check_registers -modes mv -help_short {Carries out register checks specified in components, bus definitions and bus abstractions from the IP-XACT files.} -help_long {From the component definition in the IP-XACT files, the bus interfaces and address maps are parsed and for each field in a register in such a map, assertions are generated about correct initialization and correct writing to the register. These assertions are then checked and the check results are summarized. Supported protocols with auto-loaded IP-XACT files are (the VLNV is shown with : as a separator):
 <itemizedlist> <listitem><para>APB version 2 or 3: use VLNV <literal>ARM:AMBA:APB:3</literal> as bus defintion and <literal>ARM:AMBA:APB_RTL:3</literal> as abstraction definition. For version 2, simply map <literal>PREADY</literal> to 1 and <literal>PSLVERR</literal> to 0.</para></listitem>
 <listitem><para>AHB version 2 or 3, AHBlite version 3: use VLNV <literal>ARM:AMBA:AHBLite:3</literal> as bus defintion and <literal>ARM:AMBA:AHBLite_RTL:3</literal> as abstraction definition</para></listitem>
 <listitem><para>AXI4Lite: use VLNV <literal>ARM:AMBA:AXI4Lite:4</literal> as bus defintion and <literal>ARM:AMBA:AXI4Lite_RTL:4</literal> as abstraction definition</para></listitem>
 <listitem><para>Wishbone: use VLNV <literal>OpenCores:wishbone:wishbone:B4</literal> as bus definition and <literal>OpenCores:wishbone:wishbone_RTL:B4</literal> as abstraction definition</para></listitem>
 </itemizedlist>} -predef_completor {type FILE extension {xml rdl}} -see_also {check debug instantiate_vip} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name run_checks type YESNO default true help {Allows to switch off the running of the checks.} hidden false no_help {Allows to switch off the running of the checks.}} -opt {name remove_check_file type YESNO default false help {Allows to automatically delete the temporary file with generated checks after checking is finished. This is useful for regression runs.} hidden false no_help {Allows to automatically delete the temporary file with generated checks after checking is finished. This is useful for regression runs.}} -opt {name disable_cond type STRING default {} help {Allows to specify a list of signals to be used in the disable condition. A leading ! indicates that the signal should be negated in the disable condition.} hidden false synopsis disable_list} -opt {name use_disable type YESNO default true help {Allows to de-active disable clauses in generated assertions.} hidden true no_help {Allows to de-active disable clauses in generated assertions.}} -opt {name clustering type YESNO default true help {Allows to run generated assertions with clustering.} hidden true no_help {Allows to run generated assertions with clustering.}} -opt {name filename type STRING default {} help {Allows to specify a filename for the generated assertions.} hidden false synopsis name} -opt {name force type BOOL default false help {Forces overwriting of files.} hidden false} -opt {completor ::onespin_internal::assertion_generation::clk_sig_completor name clock_signal type STRING default {} help {Allows to select a specific trigger clock for assertion generation.} hidden false synopsis clk} -opt {name clock_edge type ENUM default default help {Allows to select a specific edge for the trigger clock.} hidden false values {default posedge negedge edge}} -opt {name signal_map type STRING default {} help {Allows to specify the signal mapping from the logical bus signals to the master signals to be used.} hidden false synopsis map} -opt {completor ::onespin_internal::register_checking::instance_completor name vip_instance type STRING default {} help {Allows to specify the instance name of a verification IP as an alternative to specifying a signal map.} hidden false synopsis inst} -opt {name bus_pipe type STRING default {} help {Allows to specify the pipeline ready signal for a pipelined bus.} hidden false synopsis expr} -opt {name bus_write type STRING default {} help {Allows to specify the Boolean condition for a write on the bus.} hidden false synopsis expr} -opt {name bus_read type STRING default {} help {Allows to specify the Boolean condition for a read on the bus.} hidden false synopsis expr} -opt {name bus_okay type STRING default {} help {Allows to specify the Boolean condition for an okay response of a slave.} hidden false synopsis expr} -opt {name module_pattern type STRING default %s help {Pattern to map addressBlock to DUT module/entity name.} hidden false synopsis string} -opt {name signal_pattern type STRING default %s help {Pattern to map register/field to DUT signal name.} hidden false synopsis string} -opt {name unbounded type YESNO default false help {Allows to create unbounded assertions for register checking, like if a write is followed by a read, the read returns the data written by the write. Such assertions typically have much worse performance than the bounded ones} hidden true no_help {Allows to create unbounded assertions for register checking, like if a write is followed by a read, the read returns the data written by the write. Such assertions typically have much worse performance than the bounded ones}} -opt {name RDL_VLNV type STRING default {} help {When used, this option toggles SystemRDL support and set the VLNV of the bus that the RDL address map is connected to.} hidden true synopsis string} -opt {name check_volatile type YESNO default false help {Allows to create assertions that for volatile registers, the write data makes it to the DUT signal implementing the register (useful if bus writes take precedence over updates from hardware)} hidden false no_help {Allows to create assertions that for volatile registers, the write data makes it to the DUT signal implementing the register (useful if bus writes take precedence over updates from hardware)}} -opt {name parameter_map type STRING default {reset synchronousResetSignal we writeEnableSignal sig_activation signalActivation sig_name signalName ab_name moduleName} help {Allows to specify the parameter names used to encode synchronous resets and write enables.} hidden false synopsis map} -opt {name use_dut_signals type YESNO default false help {Allows to use the DUT signals implementing the registers in the created assertions.} hidden false no_help {Allows to use the DUT signals implementing the registers in the created assertions.}} -opt {name use_functions type YESNO default true help {Allows to use functions for bus read/write to generate more readable assertions.} hidden false no_help {Allows to use functions for bus read/write to generate more readable assertions.}} -opt {name filter type STRING default {} help {Allows to filter generated checks on memoryMap, addressBlock, registerFile, register, or field. Valid operators are ==, !=, =~, !~, the latter two allowing for globbing. In addition, &amp;&amp;, ||, () can be used to build more complex expressions.} hidden false synopsis string} -opt {name error_on_illegal type YESNO default true help {Allows to create assertions for access of unspecified addresses and write values outside of constraints.} hidden false no_help {Allows to create assertions for access of unspecified addresses and write values outside of constraints.}} -opt {name plugin type STRING default {} help {Allows to specify a tcl procedure as modifier for conditions.} hidden false synopsis tcl_proc} -opt {name additional_rtl type STRING default {} help {Allows to add additional RTL code, including new signals.} hidden false synopsis code} -opt {name combinational_read type YESNO default false help {Allows to optimize assertions for registered or combinational read access. The exact timing of reads is required for volatile registers when using DUT signals.} hidden false no_help {Allows to optimize assertions for registered or combinational read access. The exact timing of reads is required for volatile registers when using DUT signals.}} -opt {name debugger_integration type YESNO default true help {Allows to switch off debugger integration.} hidden false no_help {Allows to switch off debugger integration.}} -opt {name combine_fields type YESNO default true help {Allows to automatically combine checks for fields into one check for the whole register.} hidden false no_help {Allows to automatically combine checks for fields into one check for the whole register.}} -opt {name max_regs_debugger_integration type STRING default 512 help {If the number of registers exceeds this limit, debugger integration will be de-activated.} hidden true synopsis integer} check_registers 
onespin::create_command -force -callback onespin::fsm::include_fsm_state_impl -arg_num -2 -arg_desc {<fsm_id> <state>} -help_short {include the check for an fsm state} -modes {cc mv} -see_also {exclude_fsm_state_check include_fsm_transition_check exclude_fsm_transition_check get_excluded_fsm_checks} -arg_completor onespin::fsm::fsm_state_subchecks include_fsm_state_check 
onespin::create_command -force -callback onespin::fsm::exclude_fsm_state_impl -arg_num -2 -arg_desc {<fsm_id> <state>} -help_short {exclude the check for an fsm state as if it were non existent in HDL (syntactically unreachable)} -modes {cc mv} -opt { name "reason" type "STRING" help "a reason for an exclusion" synopsis "<reason>" default "no reason" } -see_also {include_fsm_state_check include_fsm_transition_check exclude_fsm_transition_check get_excluded_fsm_checks} -arg_completor onespin::fsm::fsm_state_subchecks exclude_fsm_state_check 
onespin::create_command -force -callback onespin::fsm::include_fsm_transition_impl -arg_num -2 -arg_desc {<fsm_id> <state-from> <state-to>} -help_short {include the check for an fsm transition} -modes {cc mv} -see_also {exclude_fsm_state_check include_fsm_state_check exclude_fsm_transition_check get_excluded_fsm_checks} -arg_completor onespin::fsm::fsm_trans_subchecks include_fsm_transition_check 
onespin::create_command -force -callback onespin::fsm::exclude_fsm_transition_impl -arg_num -2 -arg_desc {<fsm_id> <state-from> <state-to>} -help_short {exclude the check for an fsm transition as if it were non existent in HDL (syntactically unreachable)} -modes {cc mv} -opt { name "reason" type "STRING" help "a reason for an exclusion" synopsis "<reason>" default "no reason" } -see_also {exclude_fsm_state_check include_fsm_state_check include_fsm_transition_check get_excluded_fsm_checks} -arg_completor onespin::fsm::fsm_trans_subchecks exclude_fsm_transition_check 
onespin::create_command -force -callback onespin::fsm::get_excluded_fsm_checks_impl -arg_num 0 -help_short {retrieve all excluded fsm checks and subchecks} -see_also {exclude_fsm_state_check include_fsm_state_check include_fsm_transition_check exclude_fsm_transition_check} -modes {cc mv} get_excluded_fsm_checks 
onespin::noop 
get_read_hdl_option -vhdl_version 
::read_vhdl -version 93 -display_errors_only -ignore_pragma_settings -library synopsys /opt/onespin/latest/lib/vhdl/synopsys/orig/*.vhd 
get_read_hdl_option -vhdl_version 
::read_vhdl -display_errors_only -ignore_pragma_settings -library ieee /opt/onespin/latest/lib/vhdl/ieee/orig/std_logic_1164.vhd /opt/onespin/latest/lib/vhdl/ieee/orig/std_logic_arith.vhd /opt/onespin/latest/lib/vhdl/ieee/orig/std_logic_signed.vhd /opt/onespin/latest/lib/vhdl/ieee/orig/std_logic_unsigned.vhd /opt/onespin/latest/lib/vhdl/ieee/orig/std_logic_misc.vhd /opt/onespin/latest/lib/vhdl/ieee/orig/gs_types.vhd /opt/onespin/latest/lib/vhdl/ieee/orig/std_logic_textio.vhd /opt/onespin/latest/lib/vhdl/ieee/orig/std_logic_components.vhd /opt/onespin/latest/lib/vhdl/ieee/orig/std_logic_entities.vhd /opt/onespin/latest/lib/vhdl/ieee/orig/math_real.vhd /opt/onespin/latest/lib/vhdl/ieee/orig/math_complex.vhd /opt/onespin/latest/lib/vhdl/ieee/orig/timing_p.vhd /opt/onespin/latest/lib/vhdl/ieee/orig/timing_b.vhd /opt/onespin/latest/lib/vhdl/ieee/orig/prmtvs_p.vhd /opt/onespin/latest/lib/vhdl/ieee/orig/ulogic_arithmetic.vhd 
::read_vhdl -display_errors_only -ignore_pragma_settings -library ieee -version 87 /opt/onespin/latest/lib/vhdl/ieee/orig/prmtvs_b.vhd 
::read_vhdl -display_errors_only -ignore_pragma_settings -library onespin /opt/onespin/latest/lib/vhdl/onespin/orig/substitute.vhd 
::read_vhdl -display_errors_only -ignore_pragma_settings -noignore_numericstd -library ieee -pragma_ignore {} -version 93 /opt/onespin/latest/lib/vhdl_jaguar/Linux_x86_64/auxi/packages/IEEE/numeric_std.vhd /opt/onespin/latest/lib/vhdl_jaguar/Linux_x86_64/auxi/packages/IEEE/numeric_bit.vhd 
::read_vhdl -display_errors_only -ignore_pragma_settings -library ncutils -version 93 /opt/onespin/latest/lib/vhdl/ncutils/orig/ncutilities.vhdl 
read_vhdl -golden -pragma_ignore {} -version 93 { /home/group09/projects/04/proc-package.vhd /home/group09/projects/04/proc-seq.vhd /home/group09/projects/04/proc.vhd } 
elaborate -golden 
compile -golden 
set_mode mv 
read_sva /home/group09/projects/04/proc.tda 
get_properties 
check {sva/inst_proc_property_suite/ops/a_or_imm sva/inst_proc_property_suite/ops/a_or_reg} 
check_case_split sva/inst_proc_property_suite/ops/a_or_imm 
debug_case_split sva/inst_proc_property_suite/ops/a_or_imm 
check_case_split sva/inst_proc_property_suite/ops/a_or_reg 
onespin::noop 
onespin::noop 
read_itl 
read_sva 
get_properties 
check {sva/inst_proc_property_suite/ops/a_add_imm sva/inst_proc_property_suite/ops/a_or_imm sva/inst_proc_property_suite/ops/a_or_reg} 
onespin::noop 
onespin::noop 
read_itl 
onespin::noop 
read_itl 
read_sva 
get_properties 
check {sva/inst_proc_property_suite/ops/a_add_imm sva/inst_proc_property_suite/ops/a_add_reg sva/inst_proc_property_suite/ops/a_or_imm sva/inst_proc_property_suite/ops/a_or_reg} 
check -pass {sva/inst_proc_property_suite/ops/a_add_imm sva/inst_proc_property_suite/ops/a_add_reg sva/inst_proc_property_suite/ops/a_or_imm sva/inst_proc_property_suite/ops/a_or_reg} 
